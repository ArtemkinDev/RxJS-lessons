function createSubscribe(name) {
	return {
		next(x) {
			console.log(name, ': ', x);
		},
		error(err) {
			console.log('Error : ', x);
		},
		complete() {
			console.log(name, ': completed');
		},
	}
}


/*
* Объединяем 2 стрима в 1 с помощью метода merge()
* 
*/

const s1$ = Rx.Observable.of('Hello');
const s2$ = Rx.Observable.of('World');

// s1$.merge(s2$).subscribe(createSubscribe('merge'));
Rx.Observable.merge(s1$,s2$).subscribe(createSubscribe('merge'));


/*
* Объединяем 2 стрима из интервалов в 1 
* 
*/

const i1$ = Rx.Observable.interval(1000).map(x => 'Stream 1 ' + x);
const i2$ = Rx.Observable.interval(500).map(x => 'Stream 2 ' + x);

Rx.Observable
.merge(i1$,i2$)
.take(12)
.subscribe(createSubscribe('merge'));


/*
* mergeAll() объединяет все стримы в 1
*/

Rx.Observable.range(1,3) // 1,2,3
.map(x => Rx.Observable.range(1,3))
.mergeAll()
.subscribe(createSubscribe('mergeAll'));


/*
* concat(s1,s2) Объединяем 2 стрима в 1 
* основное отличие от merge в том что concat выполняет все в правильной последовательности
*/

const s1$ = Rx.Observable.from([1,2,3]);
const s2$ = Rx.Observable.from([4,5,6]);

Rx.Observable.concat(s1$,s2$).subscribe(createSubscribe('concat'));

/*
* concatAll(s1,s2) 
*/

Rx.Observable.range(1,3) 
.map(x => Rx.Observable.range(x,3))
.concatAll()
.subscribe(createSubscribe('concatAll'));
